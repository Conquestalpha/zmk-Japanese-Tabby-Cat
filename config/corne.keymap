/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&nice_view_spi {
    cs-gpios = <&pro_micro 10 GPIO_ACTIVE_HIGH>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        combo_exclaimation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <2 3>;
        };

        combo_at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <14 15 16>;
        };

        combo_hash {
            bindings = <&kp HASH>;
            key-positions = <1 3>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <1 5>;
        };

        combo_percent {
            bindings = <&kp PERCENT>;
            key-positions = <2 4>;
        };

        combo_ampersand {
            bindings = <&kp AMPS>;
            key-positions = <19 20>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <19 21>;
        };

        combo_asterisk {
            bindings = <&kp ASTRK>;
            key-positions = <21 20>;
        };

        combo_left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <8 7>;
        };

        combo_right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <9 8>;
        };

        combo_volume_up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <27 28>;
        };

        combo_volume_down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <25 26>;
        };

        combo_mute {
            bindings = <&kp C_MUTE>;
            key-positions = <25 26 27>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <5 4>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <29 28>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <17 16>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <30 31>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <18 19>;
        };

        combo_media_previous {
            bindings = <&kp C_RW>;
            key-positions = <13 26>;
        };

        combo_Media_Next {
            bindings = <&kp C_FF>;
            key-positions = <27 16>;
        };

        combo_left_control {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <24 36>;
        };

        combo_left_option {
            bindings = <&kp LEFT_ALT>;
            key-positions = <24 38>;
        };

        combo_single_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <9 10>;
        };

        combo_apostrophe {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <10 20 21>;
        };

        combo_question {
            bindings = <&kp QUESTION>;
            key-positions = <21 20 19>;
        };

        combo_slash {
            bindings = <&kp SLASH>;
            key-positions = <32 21 10>;
        };

        combo_colon {
            bindings = <&kp COLON>;
            key-positions = <33 32 31>;
        };

        combo_semicolon {
            bindings = <&kp SEMI>;
            key-positions = <30 31 32>;
        };

        combo_dot {
            bindings = <&kp DOT>;
            key-positions = <19 9 8>;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <18 7 8>;
        };

        combo_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <23 22>;
        };

        combo_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <22 21>;
        };

        combo_backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <10 11>;
        };

        combo_enter_left {
            bindings = <&kp ENTER>;
            key-positions = <2 3 4>;
        };

        combo_enter_right {
            bindings = <&kp ENTER>;
            key-positions = <9 8 7>;
        };

        combo_play {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <26 27>;
        };

        combo_slash {
            bindings = <&kp SLASH>;
            key-positions = <10 9 20>;
        };

        combo_tab_2 {
            bindings = <&kp TAB>;
            key-positions = <15 16>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &kp TAB  &kp Q  &kp W  &kp E     &kp R      &kp T  &kp Y      &kp U     &kp I     &kp O     &kp P   &kp BSPC
    &mo 2  &kp A  &kp S  &kp D     &kp F      &kp G  &kp H      &kp J     &kp K     &kp L    &kp UP      &mo 2
&kp LSHFT  &kp Z  &kp X  &kp C     &kp V      &kp B  &kp N      &kp M     &mo 3  &kp LEFT  &kp DOWN  &kp RIGHT
                         &mo 1  &kp LGUI  &kp SPACE  &mo 1  &kp SPACE  &kp RALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp LS(LG(N4))        &kp N1      &kp N2        &kp N3         &kp N4         &kp N5   &kp N6           &kp N7           &kp N8           &kp N9  &kp N0         &kp BSPC
  &kp LEFT_GUI      &kp LEFT      &kp UP      &kp DOWN      &kp RIGHT    &kp LC(TAB)   &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans           &trans
        &trans  &kp LA(LEFT)  &kp LA(UP)  &kp LA(DOWN)  &kp LA(RIGHT)  &kp LA(LG(V))   &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &kp RIGHT_SHIFT
                                                &trans         &trans         &trans  &kp RET          &kp DOT  &kp KP_NUMBER_0
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
  &kp TAB  &kp EXCL    &kp UP      &kp HASH      &kp DLLR  &kp PRCNT  &kp CARET   &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR   &kp BSPC
&kp LCTRL  &kp LEFT  &kp DOWN     &kp RIGHT        &trans     &trans  &kp MINUS  &kp EQUAL         &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT    &trans    &trans        &trans        &trans     &trans  &kp UNDER   &kp PLUS         &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                               &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE    &kp RET     &trans         &kp RALT
            >;
        };

        Setting {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans   &mo 4  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Bluetooth {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans    &bt BT_PRV    &bt BT_NXT  &trans  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans        &trans    &bt BT_CLR  &trans  &trans  &trans
            >;
        };
    };
};
